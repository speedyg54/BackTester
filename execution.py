# -*- coding: utf-8 -*-
#!/usr/bin/python
#execution.py
from __future__ import print_function
"""
Created on Thu May 23 20:31:04 2019

@author: OBar
"""

from abc import ABCMeta, abstractmethod
import datetime
import queue
from event_driven_trading.event import FillEvent, OrderEvent


class ExecutionHandler(object):
    """
    The ExecutionHandler abstract class handles the interaction
    between a set of order objects generated by a Portfolio and
    the ultimate set of Fill objects that actually occur in the
    market.
    The handlers can be used to subclass simulated brokerages
    or live brokerages, with identical interfaces. This allows
    strategies to be backtested in a very similar manner to the
    live trading engine.
    """
    __metaclass__ = ABCMeta
    
    @abstractmethod
    def execute_order(self, event):
        """Takes an order and executes it, producing a fill event
        that gets placed into the Event queue.
        """
        raise NotImplementedError("Should implement execute_order()")
        
class SimulatedExecutionHandler(ExecutionHandler):
    """
    The simulated execution handler simply converts all order
    objects into their equivalent fill objects automatically
    without latency, slippage or fill-ratio issues.
    This allows a straightforward "first go" test of any strategy,
    before implementation with a more sophisticated execution
    handler.
    """
    
    def __init__(self, events):
        """
        Initialises the handler, settting the queues up internally
        """
        self.events = events
        
    def execute_order(self, event):
        """
        Simply converts order objects into Fill objects naively,
        i.e. without any latency, slippage or fill ratio problems.
        """
        if event.type == 'ORDER':
            fill_event = FillEvent(
                    datetime.datetime.utcnow(), event.symbol,
                    'ARCA', event.quantity, event.direction, None
                    )
            self.events.put(fill_event)























